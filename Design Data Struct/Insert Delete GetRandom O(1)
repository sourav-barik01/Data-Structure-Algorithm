class RandomizedSet {
public:
    vector<int> v;
    unordered_map<int, int> mp;

    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        if(mp.find(val) != mp.end()){   // if val is already present in map
            return false;
        }
        v.push_back(val);
        mp[val] = v.size()-1;   // with val we are storing its index
        return true;
    }
    
    bool remove(int val) {
        if(mp.find(val) == mp.end()){
            return false;
        }

        // We are doing this oper. below to remove the element from v so we are taking the element to the last idx of v so that v.pop_back() can work
        int idx = mp[val];  // access the element idx from map which is to be removed 
        int lastElement = v.back();   // store the last element of v
        v.back() = val;               // Replace the last element with the val to be removed

        v[idx] = lastElement;         // Now the last element will take place of the removed element
        mp[lastElement] = idx;        // Also chnge the index in map

        v.pop_back();                 // Remove from v
        mp.erase(val);                // Remove from mp also

        return true;
    }
    
    int getRandom() {
        int rand_idx = rand() % v.size();   // 0, 1, 2...... (n-1)
        return v[rand_idx];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
